<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="demo.domain.dal.mapper.original.ErpShopConfigMapper">
  <resultMap id="BaseResultMap" type="demo.domain.model.entity.ErpShopConfig">
    <id column="ID" jdbcType="INTEGER" property="ID" />
    <result column="shopID" jdbcType="INTEGER" property="shopID" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="isNotifyBalanceLess" jdbcType="INTEGER" property="isNotifyBalanceLess" />
    <result column="balanceLessValue" jdbcType="INTEGER" property="balanceLessValue" />
    <result column="isNotifyBeforeExpire" jdbcType="INTEGER" property="isNotifyBeforeExpire" />
    <result column="beforeDaysExpire" jdbcType="INTEGER" property="beforeDaysExpire" />
    <result column="created" jdbcType="INTEGER" property="created" />
    <result column="modified" jdbcType="INTEGER" property="modified" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, shopID, mobile, email, isNotifyBalanceLess, balanceLessValue, isNotifyBeforeExpire, 
    beforeDaysExpire, created, modified
  </sql>
  <select id="selectByExample" parameterType="demo.domain.model.entity.ErpShopConfigExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from `erpShopConfig`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `erpShopConfig`
    where ID = #{ID,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `erpShopConfig`
    where ID = #{ID,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="demo.domain.model.entity.ErpShopConfigExample">
    delete from `erpShopConfig`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="demo.domain.model.entity.ErpShopConfig">
    <selectKey keyProperty="ID" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `erpShopConfig` (shopID, mobile, email, 
      isNotifyBalanceLess, balanceLessValue, 
      isNotifyBeforeExpire, beforeDaysExpire, 
      created, modified)
    values (#{shopID,jdbcType=INTEGER}, #{mobile,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{isNotifyBalanceLess,jdbcType=INTEGER}, #{balanceLessValue,jdbcType=INTEGER}, 
      #{isNotifyBeforeExpire,jdbcType=INTEGER}, #{beforeDaysExpire,jdbcType=INTEGER}, 
      #{created,jdbcType=INTEGER}, #{modified,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="demo.domain.model.entity.ErpShopConfig">
    <selectKey keyProperty="ID" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `erpShopConfig`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="shopID != null">
        shopID,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="isNotifyBalanceLess != null">
        isNotifyBalanceLess,
      </if>
      <if test="balanceLessValue != null">
        balanceLessValue,
      </if>
      <if test="isNotifyBeforeExpire != null">
        isNotifyBeforeExpire,
      </if>
      <if test="beforeDaysExpire != null">
        beforeDaysExpire,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="modified != null">
        modified,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="shopID != null">
        #{shopID,jdbcType=INTEGER},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="isNotifyBalanceLess != null">
        #{isNotifyBalanceLess,jdbcType=INTEGER},
      </if>
      <if test="balanceLessValue != null">
        #{balanceLessValue,jdbcType=INTEGER},
      </if>
      <if test="isNotifyBeforeExpire != null">
        #{isNotifyBeforeExpire,jdbcType=INTEGER},
      </if>
      <if test="beforeDaysExpire != null">
        #{beforeDaysExpire,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        #{created,jdbcType=INTEGER},
      </if>
      <if test="modified != null">
        #{modified,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="demo.domain.model.entity.ErpShopConfigExample" resultType="java.lang.Long">
    select count(*) from `erpShopConfig`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update `erpShopConfig`
    <set>
      <if test="record.ID != null">
        ID = #{record.ID,jdbcType=INTEGER},
      </if>
      <if test="record.shopID != null">
        shopID = #{record.shopID,jdbcType=INTEGER},
      </if>
      <if test="record.mobile != null">
        mobile = #{record.mobile,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.isNotifyBalanceLess != null">
        isNotifyBalanceLess = #{record.isNotifyBalanceLess,jdbcType=INTEGER},
      </if>
      <if test="record.balanceLessValue != null">
        balanceLessValue = #{record.balanceLessValue,jdbcType=INTEGER},
      </if>
      <if test="record.isNotifyBeforeExpire != null">
        isNotifyBeforeExpire = #{record.isNotifyBeforeExpire,jdbcType=INTEGER},
      </if>
      <if test="record.beforeDaysExpire != null">
        beforeDaysExpire = #{record.beforeDaysExpire,jdbcType=INTEGER},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=INTEGER},
      </if>
      <if test="record.modified != null">
        modified = #{record.modified,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `erpShopConfig`
    set ID = #{record.ID,jdbcType=INTEGER},
      shopID = #{record.shopID,jdbcType=INTEGER},
      mobile = #{record.mobile,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      isNotifyBalanceLess = #{record.isNotifyBalanceLess,jdbcType=INTEGER},
      balanceLessValue = #{record.balanceLessValue,jdbcType=INTEGER},
      isNotifyBeforeExpire = #{record.isNotifyBeforeExpire,jdbcType=INTEGER},
      beforeDaysExpire = #{record.beforeDaysExpire,jdbcType=INTEGER},
      created = #{record.created,jdbcType=INTEGER},
      modified = #{record.modified,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="demo.domain.model.entity.ErpShopConfig">
    update `erpShopConfig`
    <set>
      <if test="shopID != null">
        shopID = #{shopID,jdbcType=INTEGER},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="isNotifyBalanceLess != null">
        isNotifyBalanceLess = #{isNotifyBalanceLess,jdbcType=INTEGER},
      </if>
      <if test="balanceLessValue != null">
        balanceLessValue = #{balanceLessValue,jdbcType=INTEGER},
      </if>
      <if test="isNotifyBeforeExpire != null">
        isNotifyBeforeExpire = #{isNotifyBeforeExpire,jdbcType=INTEGER},
      </if>
      <if test="beforeDaysExpire != null">
        beforeDaysExpire = #{beforeDaysExpire,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=INTEGER},
      </if>
      <if test="modified != null">
        modified = #{modified,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{ID,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="demo.domain.model.entity.ErpShopConfig">
    update `erpShopConfig`
    set shopID = #{shopID,jdbcType=INTEGER},
      mobile = #{mobile,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      isNotifyBalanceLess = #{isNotifyBalanceLess,jdbcType=INTEGER},
      balanceLessValue = #{balanceLessValue,jdbcType=INTEGER},
      isNotifyBeforeExpire = #{isNotifyBeforeExpire,jdbcType=INTEGER},
      beforeDaysExpire = #{beforeDaysExpire,jdbcType=INTEGER},
      created = #{created,jdbcType=INTEGER},
      modified = #{modified,jdbcType=INTEGER}
    where ID = #{ID,jdbcType=INTEGER}
  </update>
</mapper>