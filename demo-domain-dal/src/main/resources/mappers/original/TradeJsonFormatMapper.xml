<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="demo.domain.dal.mapper.original.TradeJsonFormatMapper">
  <resultMap id="BaseResultMap" type="demo.domain.model.entity.TradeJsonFormat">
    <id column="tradeJFID" jdbcType="INTEGER" property="tradeJFID" />
    <result column="tid" jdbcType="BIGINT" property="tid" />
    <result column="shopID" jdbcType="INTEGER" property="shopID" />
    <result column="syncTradeType" jdbcType="INTEGER" property="syncTradeType" />
    <result column="sellerID" jdbcType="BIGINT" property="sellerID" />
    <result column="sellerNickname" jdbcType="VARCHAR" property="sellerNickname" />
    <result column="created" jdbcType="INTEGER" property="created" />
    <result column="modified" jdbcType="INTEGER" property="modified" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="demo.domain.model.entity.TradeJsonFormat">
    <result column="tradeBody" jdbcType="LONGVARCHAR" property="tradeBody" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    tradeJFID, tid, shopID, syncTradeType, sellerID, sellerNickname, created, modified
  </sql>
  <sql id="Blob_Column_List">
    tradeBody
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="demo.domain.model.entity.TradeJsonFormatExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from `erpTradeJsonFormat`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="demo.domain.model.entity.TradeJsonFormatExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from `erpTradeJsonFormat`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from `erpTradeJsonFormat`
    where tradeJFID = #{tradeJFID,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `erpTradeJsonFormat`
    where tradeJFID = #{tradeJFID,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="demo.domain.model.entity.TradeJsonFormatExample">
    delete from `erpTradeJsonFormat`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="demo.domain.model.entity.TradeJsonFormat">
    <selectKey keyProperty="tradeJFID" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `erpTradeJsonFormat` (tid, shopID, syncTradeType, 
      sellerID, sellerNickname, created, 
      modified, tradeBody)
    values (#{tid,jdbcType=BIGINT}, #{shopID,jdbcType=INTEGER}, #{syncTradeType,jdbcType=INTEGER}, 
      #{sellerID,jdbcType=BIGINT}, #{sellerNickname,jdbcType=VARCHAR}, #{created,jdbcType=INTEGER}, 
      #{modified,jdbcType=INTEGER}, #{tradeBody,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="demo.domain.model.entity.TradeJsonFormat">
    <selectKey keyProperty="tradeJFID" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `erpTradeJsonFormat`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="tid != null">
        tid,
      </if>
      <if test="shopID != null">
        shopID,
      </if>
      <if test="syncTradeType != null">
        syncTradeType,
      </if>
      <if test="sellerID != null">
        sellerID,
      </if>
      <if test="sellerNickname != null">
        sellerNickname,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="modified != null">
        modified,
      </if>
      <if test="tradeBody != null">
        tradeBody,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="tid != null">
        #{tid,jdbcType=BIGINT},
      </if>
      <if test="shopID != null">
        #{shopID,jdbcType=INTEGER},
      </if>
      <if test="syncTradeType != null">
        #{syncTradeType,jdbcType=INTEGER},
      </if>
      <if test="sellerID != null">
        #{sellerID,jdbcType=BIGINT},
      </if>
      <if test="sellerNickname != null">
        #{sellerNickname,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        #{created,jdbcType=INTEGER},
      </if>
      <if test="modified != null">
        #{modified,jdbcType=INTEGER},
      </if>
      <if test="tradeBody != null">
        #{tradeBody,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="demo.domain.model.entity.TradeJsonFormatExample" resultType="java.lang.Long">
    select count(*) from `erpTradeJsonFormat`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update `erpTradeJsonFormat`
    <set>
      <if test="record.tradeJFID != null">
        tradeJFID = #{record.tradeJFID,jdbcType=INTEGER},
      </if>
      <if test="record.tid != null">
        tid = #{record.tid,jdbcType=BIGINT},
      </if>
      <if test="record.shopID != null">
        shopID = #{record.shopID,jdbcType=INTEGER},
      </if>
      <if test="record.syncTradeType != null">
        syncTradeType = #{record.syncTradeType,jdbcType=INTEGER},
      </if>
      <if test="record.sellerID != null">
        sellerID = #{record.sellerID,jdbcType=BIGINT},
      </if>
      <if test="record.sellerNickname != null">
        sellerNickname = #{record.sellerNickname,jdbcType=VARCHAR},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=INTEGER},
      </if>
      <if test="record.modified != null">
        modified = #{record.modified,jdbcType=INTEGER},
      </if>
      <if test="record.tradeBody != null">
        tradeBody = #{record.tradeBody,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update `erpTradeJsonFormat`
    set tradeJFID = #{record.tradeJFID,jdbcType=INTEGER},
      tid = #{record.tid,jdbcType=BIGINT},
      shopID = #{record.shopID,jdbcType=INTEGER},
      syncTradeType = #{record.syncTradeType,jdbcType=INTEGER},
      sellerID = #{record.sellerID,jdbcType=BIGINT},
      sellerNickname = #{record.sellerNickname,jdbcType=VARCHAR},
      created = #{record.created,jdbcType=INTEGER},
      modified = #{record.modified,jdbcType=INTEGER},
      tradeBody = #{record.tradeBody,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `erpTradeJsonFormat`
    set tradeJFID = #{record.tradeJFID,jdbcType=INTEGER},
      tid = #{record.tid,jdbcType=BIGINT},
      shopID = #{record.shopID,jdbcType=INTEGER},
      syncTradeType = #{record.syncTradeType,jdbcType=INTEGER},
      sellerID = #{record.sellerID,jdbcType=BIGINT},
      sellerNickname = #{record.sellerNickname,jdbcType=VARCHAR},
      created = #{record.created,jdbcType=INTEGER},
      modified = #{record.modified,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="demo.domain.model.entity.TradeJsonFormat">
    update `erpTradeJsonFormat`
    <set>
      <if test="tid != null">
        tid = #{tid,jdbcType=BIGINT},
      </if>
      <if test="shopID != null">
        shopID = #{shopID,jdbcType=INTEGER},
      </if>
      <if test="syncTradeType != null">
        syncTradeType = #{syncTradeType,jdbcType=INTEGER},
      </if>
      <if test="sellerID != null">
        sellerID = #{sellerID,jdbcType=BIGINT},
      </if>
      <if test="sellerNickname != null">
        sellerNickname = #{sellerNickname,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=INTEGER},
      </if>
      <if test="modified != null">
        modified = #{modified,jdbcType=INTEGER},
      </if>
      <if test="tradeBody != null">
        tradeBody = #{tradeBody,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where tradeJFID = #{tradeJFID,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="demo.domain.model.entity.TradeJsonFormat">
    update `erpTradeJsonFormat`
    set tid = #{tid,jdbcType=BIGINT},
      shopID = #{shopID,jdbcType=INTEGER},
      syncTradeType = #{syncTradeType,jdbcType=INTEGER},
      sellerID = #{sellerID,jdbcType=BIGINT},
      sellerNickname = #{sellerNickname,jdbcType=VARCHAR},
      created = #{created,jdbcType=INTEGER},
      modified = #{modified,jdbcType=INTEGER},
      tradeBody = #{tradeBody,jdbcType=LONGVARCHAR}
    where tradeJFID = #{tradeJFID,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="demo.domain.model.entity.TradeJsonFormat">
    update `erpTradeJsonFormat`
    set tid = #{tid,jdbcType=BIGINT},
      shopID = #{shopID,jdbcType=INTEGER},
      syncTradeType = #{syncTradeType,jdbcType=INTEGER},
      sellerID = #{sellerID,jdbcType=BIGINT},
      sellerNickname = #{sellerNickname,jdbcType=VARCHAR},
      created = #{created,jdbcType=INTEGER},
      modified = #{modified,jdbcType=INTEGER}
    where tradeJFID = #{tradeJFID,jdbcType=INTEGER}
  </update>
</mapper>